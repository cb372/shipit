version: 2

new_aws_login: &new_aws_login
  run:
    name: Set AWS environment to the new account
    command: |
      echo 'export AWS_ACCESS_KEY_ID=$SHIPIT_AWS_ACCESS_KEY_ID' >> $BASH_ENV
      echo 'export AWS_SECRET_ACCESS_KEY=$SHIPIT_AWS_SECRET_ACCESS_KEY' >> $BASH_ENV

set_vars: &set_vars
  run:
    name: Set some useful vars
    command: |
      echo 'export GIT_SHA1="${CIRCLE_SHA1:-$(git rev-parse HEAD)}"' >> $BASH_ENV
      echo 'export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"' >> $BASH_ENV
      echo 'export IMAGE_URL="${AWS_ACCOUNT_ID}.dkr.ecr.eu-west-1.amazonaws.com/shipit:${GIT_SHA1}"' >> $BASH_ENV
jobs:
  build:
    working_directory: ~/shipit
    docker:
      - image: circleci/openjdk:11.0.5-jdk-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *new_aws_login
      - *set_vars
      - run:
          name: Install AWS CLI
          command: scripts/ci/install-aws-cli.sh
      - restore_cache:
          keys:
            - '{{ .Environment.CIRCLE_PROJECT_REPONAME }}-dependencies-{{ checksum "build.sbt" }}'
      - run: sbt test:compile
      - save_cache:
          key: '{{ .Environment.CIRCLE_PROJECT_REPONAME }}-dependencies-{{ checksum "build.sbt" }}'
          paths:
            - /home/circleci/.ivy2
            - /home/circleci/.sbt
            - /home/circleci/.coursier
            - project/target/resolution-cache
            - target/resolution-cache
      - run: sbt test docker:publishLocal
      - run:
          name: Publish docker image if master branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "migrate-accounts" -a "${CIRCLE_PROJECT_USERNAME}" == "ovotech" ]; then
              `aws ecr get-login --no-include-email --region eu-west-1`
              docker tag shipit:1.0 $IMAGE_URL && docker push $IMAGE_URL
            else
              echo "Not publishing Docker image"
            fi

  deploy:
    working_directory: ~/shipit
    docker:
      - image: circleci/openjdk:11.0.5-jdk-stretch
    steps:
      - checkout
      - *new_aws_login
      - *set_vars
      - run:
          name: Install AWS CLI
          command: scripts/ci/install-aws-cli.sh
      - run:
          name: Deploy to ECS
          command: |
            aws cloudformation update-stack \
              --stack-name shipit \
              --use-previous-template \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters ParameterKey=OldAppDNSName,UsePreviousValue=true \
                           ParameterKey=AppImage,ParameterValue=${IMAGE_URL} \
                           ParameterKey=VPC,UsePreviousValue=true \
                           ParameterKey=AppSubnets,UsePreviousValue=true \
                           ParameterKey=LoadBalancerSubnets,UsePreviousValue=true
      - run:
          name: Notify Shipit
          command: |
            curl https://shipit.ovotech.org.uk/deployments?apikey=$SHIPIT_API_KEY \
              -d "team=eng-services" \
              -d "service=shipit" \
              -d "buildId=$CIRCLE_BUILD_NUM" \
              -d "links[0].title=CircleCI build" \
              -d "links[0].url=$CIRCLE_BUILD_URL"

workflows:
  version: 2
  default:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
